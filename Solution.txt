技巧：
回溯：当需要不断重复遍历的时候一定用回溯！！！ 一定是重复遍历！例：DFS， 树形结构！  其实就是深度优先遍历！
动态规划：当要计算的位置元素与前面位置元素有关系的时候想到用动态规划 特例：重叠子问题结构
滑动窗口：当要计算连续子序列时可能会用到滑动窗口
双指针法：两个数组或一个数组有一定关系排列时可能用到

1. 两数之和----哈希表法*
2. 两数相加----链表
3. 无重复字符的最长子串----采用滑动窗口的思想****
4. 寻找两个有序数组的中位数----双指针法
5. 最长回文子串----动态规划 中心拓展法 *****
6. Z 字形变换----字符串逐列排序
7. 整数反转----取整取余 + 大整数溢出判断**
8. 字符串转换整数 (atoi)----过滤字符串 + 大整数溢出判断
9. 回文数----取整取余 + 整数半翻转
10. 正则表达式匹配----递归回溯 + 动态规划重叠子问题结构 *****
11. 盛最多水的容器----双指针法 **
12. 整数转罗马数字----贪心算法
13. 罗马数字转整数----构建最小哈希表法
14. 最长公共前缀----水平扫描法、zipSet赖皮法(仅python)
15. 三数之和----排序 + 双指针*****
16. 最接近的三数之和----排序 + 双指针
17. 电话号码的字母组合----回溯算法*****
19. 删除链表的倒数第N个节点----链表+双指针法
20. 有效的括号----栈
21. 合并两个有序链表----链表
22. 括号生成----递归回溯 或 动态规划 *****
23. 合并K个排序链表----优先队列 **
24. 两两交换链表中的节点----链表 + 三指针
25. K 个一组翻转链表----链表 + 尾指针 + 头插法
26. 删除排序数组中的重复项----双指针
27. 移除元素----双指针
28. 实现 strStr()----KMP算法（未理解 ）*
29. 两数相除----递归 + 二进制除法
30. 串联所有单词的子串----高阶滑动窗口思想*****
31. 下一个排列----字典序*
32. 最长有效括号----栈与括号匹配性质 + 动态规划*****
33. 搜索旋转排序数组----二分查找法
34. 在排序数组中查找元素的第一个和最后一个位置----二分查找法
35. 搜索插入位置----二分查找