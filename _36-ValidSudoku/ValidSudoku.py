'''
判断一个 9x9 的数独是否有效。只需要根据以下规则，验证已经填入的数字是否有效即可。

数字 1-9 在每一行只能出现一次。
数字 1-9 在每一列只能出现一次。
数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。

看图一
上图是一个部分填充的有效的数独。

数独部分空格内已填入了数字，空白格用 '.' 表示。

示例 1:

输入:
[
  ["5","3",".",".","7",".",".",".","."],
  ["6",".",".","1","9","5",".",".","."],
  [".","9","8",".",".",".",".","6","."],
  ["8",".",".",".","6",".",".",".","3"],
  ["4",".",".","8",".","3",".",".","1"],
  ["7",".",".",".","2",".",".",".","6"],
  [".","6",".",".",".",".","2","8","."],
  [".",".",".","4","1","9",".",".","5"],
  [".",".",".",".","8",".",".","7","9"]
]
输出: true
示例 2:

输入:
[
  ["8","3",".",".","7",".",".",".","."],
  ["6",".",".","1","9","5",".",".","."],
  [".","9","8",".",".",".",".","6","."],
  ["8",".",".",".","6",".",".",".","3"],
  ["4",".",".","8",".","3",".",".","1"],
  ["7",".",".",".","2",".",".",".","6"],
  [".","6",".",".",".",".","2","8","."],
  [".",".",".","4","1","9",".",".","5"],
  [".",".",".",".","8",".",".","7","9"]
]
输出: false
解释: 除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。
     但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无效的。
说明:

一个有效的数独（部分已被填充）不一定是可解的。
只需要根据以上规则，验证已经填入的数字是否有效即可。
给定数独序列只包含数字 1-9 和字符 '.' 。
给定数独永远是 9x9 形式的。

'''


'''
分别满足：
1、数字 1-9 在每一行只能出现一次。
2、数字 1-9 在每一列只能出现一次。
3、数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。

'''
from collections import defaultdict

class Solution(object):
    def isValidSudoku(self, board):
        """
        :type board: List[List[str]]
        :rtype: bool
        """
        # 是否满足3x3宫内只能出现一次
        def isValidSannomiya(boardTree, startrow, startcol):
            dicSan = defaultdict(int)
            for i in range(startrow, startrow+3):
                for j in range(startcol, startcol+3):
                    if not(boardTree[i][j] >= '1' and board[i][j] <= '9'):
                        continue

                    if dicSan[boardTree[i][j]] == 1:
                        return False
                    dicSan[boardTree[i][j]] = 1

            return True



                # 是否满足行和列
        for i in range(9):
            dicrow = defaultdict(int)  # 运用字典记录在前面是否有该元素  有为1 没有为0
            diccol = defaultdict(int)
            for j in range(9):
                if board[i][j]>='1' and board[i][j]<='9':
                    if dicrow[board[i][j]] == 1:
                        return False

                    dicrow[board[i][j]] = 1

                if board[j][i]>='1' and board[j][i]<='9':
                    if diccol[board[j][i]] == 1:
                        return False

                    diccol[board[j][i]] = 1

        for startrow in range(0, 9, 3):
            for startcol in range(0, 9, 3):
                if not isValidSannomiya(board, startrow, startcol):
                    return False

        return True



s = Solution()
print(s.isValidSudoku([[".",".",".",".","5",".",".","1","."],
                       [".","4",".","3",".",".",".",".","."],
                       [".",".",".",".",".","3",".",".","1"],
                       ["8",".",".",".",".",".",".","2","."],
                       [".",".","2",".","7",".",".",".","."],
                       [".","1","5",".",".",".",".",".","."],
                       [".",".",".",".",".","2",".",".","."],
                       [".","2",".","9",".",".",".",".","."],
                       [".",".","4",".",".",".",".",".","."]]))

